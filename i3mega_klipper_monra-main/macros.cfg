################################################################################
# ~~~~~~~~~~~~~~~~~~~~~~~~  AUTOCREATED WITH KIAUH  ~~~~~~~~~~~~~~~~~~~~~~~~~~ #
################################################################################
# Recommended macros and config entries if you use Mainsail or Fluidd!         #
# You can edit or delete those macros if you already defined them elsewhere!   #
################################################################################
[gcode_macro START_PRINT]
#Configure prime line - From Klipper-Adaptive-Meshing-Purging https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
variable_adaptive_enable: True     # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_purge_amount: 25           # Amount of filament in millimeters to purge
variable_line_length: 50            # Overall desired length of purge line in millimeters, around 1/5th of X axis length is a good starting value
variable_flow_rate: 12              # Desired flow rate in mm3/s (Around 12 for standard flow hotends, around 24 for high flow hotends)
variable_x_default: 10              # Default X location to purge. If adaptive_enable is True, this is overwritten
variable_y_default: 10              # Default Y location to purge. If adaptive_enable is True, this is overwritten
variable_distance_to_object_y: 10   # Y distance in millimeters away from the print area for purging. Must be less than or equal to y_default if adaptive_enable is False

#Configure Bed Leveling
variable_calibrate_bed_mesh: False     # If True create a new mesh False load default mesh

#### ECHO/DEBUG
variable_display_parameters: True   # Display macro parameters in the console, useful for debugging the SETUP_LINE_PURGE call, or more verbosity.

gcode:
      #Get Printer built volume dimensions
      {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
      {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
      {% set Z_MAX = printer.toolhead.axis_maximum.z|default(100)|float %}

      #Get Nozzle diameter and filament width for conditioning
      {% set NOZZLE = printer.extruder.nozzle_diameter|default(0.4)|float %}
      {% set FILADIA = printer.extruder.filament_diameter|default(1.75)|float %}

      #Set Start coordinates of priming lines
      {% set X_START = 10.0|default(10.0)|float %}
      {% set Y_START = 20.0|default(20.0)|float %}

      #Get Bed and Extruder temperature from Slicer GCode
      {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
      {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
      {% if display_parameters == True %}
        { action_respond_info("Bed Temperature        : %i" % (params.BED_TEMP | int)) }
        { action_respond_info("Extruder Temperature   : %i" % (params.EXTRUDER_TEMP | int)) }
      {% endif %}
      #Preheat nozzle and bed
      M104 S{EXTRUDER_TEMP} T0                        
      M140 S{BED_TEMP}                                

      #Home
      G28
      Z_TILT_ADJUST
      G28 Z
      #Bed Leveling
      BED_MESH_CLEAR
      {% if calibrate_bed_mesh == True %}
       BED_MESH_CALIBRATE PROFILE=default # Create a new bed mesh
       BED_MESH_PROFILE LOAD=default # Load stored bed mesh
      {% else %}
       BED_MESH_PROFILE LOAD=default # Load stored bed mesh
      {% endif %}
      
      {% if display_parameters == True %}
       BED_MESH_OUTPUT
      {% endif %}

      #Move up to clean bed
      G1 Y{Y_MAX - 20} Z{Z_MAX/4.0} F6000                

      #Heat nozzle and bed
      M190 S{BED_TEMP}                               
      M109 S{EXTRUDER_TEMP} T0                       

      #Prime Line
      {% if display_parameters == True %}
        { action_respond_info("adaptive_enable : %d" % (adaptive_enable))  }
        { action_respond_info("z_height        : %f" % (z_height))  }
        { action_respond_info("purge_amount    : %f" % (purge_amount))  }
        { action_respond_info("line_length     : %f" % (line_length))  }
        { action_respond_info("flow_rate       : %f" % (flow_rate))  }
        { action_respond_info("x_default       : %f" % (x_default))  }
        { action_respond_info("y_default       : %f" % (y_default))  }
        { action_respond_info("distance_to_object_y : %f" % (distance_to_object_y))  }
      {% endif %}

      {% if adaptive_enable == True %}
          {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
          {% set x_origin = (all_points | map(attribute=0) | min | default(x_default)) %}
          {% set y_origin = (all_points | map(attribute=1) | min | default(y_default)) %}
          {% set x_origin = ([x_origin, 0] | max) %}
          {% set y_origin = ([y_origin, 0] | max) %}
      {% else %}
          {% set x_origin = x_default | float %}
          {% set y_origin = y_default | float %}
      {% endif %}
      {% set nozzle_dia = printer.configfile.config.extruder.nozzle_diameter | float %}
      {% set cross_section = nozzle_dia * z_height | float %}
      {% set purge_move_speed = (cross_section * flow_rate) * 60 | float %}
      {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
      
      {% if display_parameters == True %}
        { action_respond_info("z_height          : %f" % (z_height))  }
        { action_respond_info("nozzle_dia        : %f" % (nozzle_dia))  }
        { action_respond_info("cross_section     : %f" % (cross_section))  }
        { action_respond_info("purge_move_speed  : %f" % (purge_move_speed))  }
        { action_respond_info("travel_speed      : %f" % (travel_speed))  }
        { action_respond_info("x_origin          : %f" % (x_origin))  }
        { action_respond_info("y_origin          : %f" % (y_origin))  }
      {% endif %}
      
      G92 E0                                                                              # Reset extruder
      G0 F{travel_speed}                                                                  # Set travel speed
      G90                                                                                 # Absolute positioning
      G0 X{x_origin} Y{y_origin - distance_to_object_y}                                   # Move to purge position
      G0 Z{z_height}                                                                      # Move to purge Z height
      M83                                                                                 # Relative extrusion mode
      G1 X{x_origin + line_length} E{purge_amount} F{purge_move_speed}                    # Purge line
      G1 E-.5 F2100                                                                       # Retract
      G92 E0                                                                              # Reset extruder distance
      M82                                                                                 # Absolute extrusion mode
      G0 Z{z_height * 2} F{travel_speed}                                                  # Z hop
      
[gcode_macro SETUP_START_PRINT]
gcode:
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=calibrate_bed_mesh   VALUE={params.CALIBRATE_BED_MESH|default(True)|int}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=display_parameters   VALUE={params.DISPLAY_PARAMETERS|default(True)|int}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=adaptive_enable   VALUE={params.ADAPTIVE_ENABLE|default(True)|int}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=z_height      VALUE={params.Z_HEIGHT|default(0.4)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=purge_amount  VALUE={params.PURGE_AMOUNT|default(40)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=line_length  VALUE={params.LINE_LENGTH|default(50)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=flow_rate     VALUE={params.FLOW_RATE|default(12)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=x_default     VALUE={params.X_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=y_default     VALUE={params.Y_DEFAULT|default(10)|float}
    SET_GCODE_VARIABLE MACRO=START_PRINT  VARIABLE=distance_to_object_y     VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}    

#// END_PRINT
[gcode_macro END_PRINT]
gcode:
        #Get Printer built volume dimensions
        {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
        {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}

        #Fix-up extruder
        G91                                            
        G1 E-2 F2700                                    
        G1 E-1.5 Z0.2 F2400                        
        G1 X5 Y5 F6000                               
        G1 Z5                                     
        G90                                        

        #Present print
        G1 Z{printer.toolhead.position.z + 10} F600
        G1 X{X_MAX / 2} Y{Y_MAX} F6000
        M106 S0                                      
        M104 S0                                       
        M140 S0                                 

        #Disable Steppers
        M84 X Y E                                    
##################################################################################################################################
##################################################################################################################################

# Current Version v_202305221109
# Mas info - https://3dwork.gitbook.io/3dwork.io/klipper/mejoras/macros-mejoras/cambio-filamentos-m600

[gcode_macro PAUSE]
description: Pausa la impresion actual.
rename_existing: BASE_PAUSE
gcode:
    {% if not printer.pause_resume.is_paused %}
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        SET_GCODE_VARIABLE MACRO=_VAR_GLOBALS VARIABLE=temp_extruder_pause VALUE={printer.extruder.target}
        M400
        SAVE_GCODE_STATE NAME=PAUSE_state
        BASE_PAUSE
        #BEEP
        MOVE_PARK
        #BEEP R={vg.beeps}
    {% endif %}

# Current Version v_202305221109
# Mas info - https://3dwork.gitbook.io/3dwork.io/klipper/mejoras/macros-mejoras/cambio-filamentos-m600

[gcode_macro RESUME]
description: Reanuda la impresion si la impresora esta en pausa.
rename_existing: RESUME_BASE
gcode:
    {% if printer.pause_resume.is_paused %}
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        
        {% if printer.extruder.can_extrude %}
            G91
            G1 E{vg.retract_length} F2100
            G90
        {% else %}
            NOTIFY TEXT="Temperatura baja, imposible extruir"
        {% endif %}
        
        M109 S{vg.temp_extruder_pause}   ; espera hasta alcanzar la temperatura previa del extrusor
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
        RESUME_BASE
    {% endif %}
    
# Current Version v_202305221109
# Mas info - https://3dwork.gitbook.io/3dwork.io/klipper/mejoras/macros-mejoras/cambio-filamentos-m600

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
    END_PRINT
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    CANCEL_PRINT_BASE

# Current Version v_202305221109
### PAUSE AT LAYER
# Usage: SET_PAUSE_NEXT_LAYER [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode: SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable':True, 'call':params.MACRO|default("PAUSE")}}"

# Usage: SET_PAUSE_AT_LAYER [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% if params.LAYER is defined %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': True, 'layer':params.LAYER|int, 'call':params.MACRO|default("PAUSE")}}"
  {% else %}
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer':0, 'call':"PAUSE"}}"
  {% endif %}

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature 
variable_pause_next_layer: {'enable':False, 'call':"PAUSE"}
variable_pause_at_layer  : {'enable':False, 'layer':0, 'call':"PAUSE"}
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable': False, 'call':"PAUSE"}}"
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer': 0, 'call':"PAUSE"}}"
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
    
# Current Version v_202306142036
# Mas info - https://3dwork.gitbook.io/3dwork.io/klipper/mejoras/macros-mejoras/cambio-filamentos-m600
######################################################################
#                           CAMBIO DE FILAMENTO
######################################################################
#   M600
#   M601
#   CHANGE_FILAMENT
#   LOAD_FILAMENT
#   UNLOAD_FILAMENT
#   NOTIFY
#   BEEP
######################################################################

[gcode_macro M600]
description: Codigo gcode para el cambio de filamento
gcode:  
   CHANGE_FILAMENT

[gcode_macro M601]
description: Codigo gcode que pausa la impresion
gcode:
   PAUSE
   
[gcode_macro CHANGE_FILAMENT]
description: Cambio de filamento
gcode:
    PAUSE
    UNLOAD_FILAMENT
    #BEEP R=3

[gcode_macro LOAD_FILAMENT]
description: Realiza la carga de filamento calentando el hotend si es necesario
gcode:

    {% if printer.extruder.can_extrude %}   ; se comprueba que se pueda extruir para cargar el filamento
        _LOAD_FILAMENT
    {% else %}
        _TEMP_EXTRUDER
        _LOAD_FILAMENT
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Realiza la descarga de filameno calentando el hotend si es necesario
gcode:
    {% if printer.extruder.can_extrude %} ; se comprueba que se pueda extruir para descargar el filamento
        _UNLOAD_FILAMENT
    {% else %}
        _TEMP_EXTRUDER
        _UNLOAD_FILAMENT
    {% endif %}

[gcode_macro NOTIFY]
description: Envia un texto al LCD y Consola\n Uso: NOTIFY TEXT="TEXTO" CLEAR=[0|1] limpia pantalla en 10 segundos.
gcode:
    {% set TEXT = params.TEXT|default("")|string %}
    {% set CLEAR = params.CLEAR|default(0)|int %}
    
    {% if TEXT != "" %}
        M117 {TEXT}
        {action_respond_info("%s" % (TEXT))}

        {% if CLEAR|int == 1 %}
            UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
        {% endif %}
    {% endif %}


#[gcode_macro BEEP]
#description: Emite un pitido.\n Uso BEEP [R=NUMERO DE PITIDOS]
#gcode:
    #{% if 'output_pin beeper' in printer.configfile.settings and printer["gcode_macro M300"] is defined %}
        #{% set R = params.R|default(0)|int %}
        #{% for i in range(R) %}
            #M300 P200
        #{% endfor %}
    #{% endif %}    

[gcode_macro _LOAD_FILAMENT]
gcode: |
    {% if printer.extruder.can_extrude %}   ; se comprueba que se pueda extruir para cargar el filamento
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        SAVE_GCODE_STATE NAME=LOAD_state

        NOTIFY TEXT="Cargando filamento..."
        M83                                             ; activar extrusion relativa
        {% for r in range(vg.fil_num_repeats) %}        ; repite la carga de filamento x veces
            G1 E{vg.fil_length} F{vg.fil_speed}         ; se carga filamento x veces para evitar el limite de longitud
        {% endfor %}
        G1 E-{vg.retract_length} F{vg.retract_speed}    ; retrae el fimalento (indicado o configurado por firmware)
        NOTIFY TEXT="Filamento cargado." CLEAR=1

        RESTORE_GCODE_STATE NAME=LOAD_state
        #BEEP
    {% else %}
        NOTIFY TEXT="Temperatura baja, imposible cargar el filamento."
   {% endif %}

[gcode_macro _UNLOAD_FILAMENT]
gcode:
    {% if printer.extruder.can_extrude %} ; se comprueba que se pueda extruir para descargar el filamento
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        SAVE_GCODE_STATE NAME=UNLOAD_state

        NOTIFY TEXT="Descargando filamento..."
        M83                                             ; activar extrusion relativa
        G1 E{vg.fil_length_purge} F{vg.fil_purge_speed} ; purga rapida
        G1 E-{vg.retract_length} F{vg.retract_speed}    ; retrae el fimalento (indicado o configurado por firmware)
        G4 P1000                                        ; esperamos a que enfrie un poco el filamento
        G1 E-{vg.fil_length/5} F{vg.fil_speed}          ; se descarga el filamento lentamente para evitar atascos
        {% for r in range(vg.fil_num_repeats) %}        ; repite la descarga de filamento x veces
            G1 E-{vg.fil_length} F{vg.fil_fast_speed}   ; se descarga filamento x veces para evitar el limite de longitud
        {% endfor %}

        NOTIFY TEXT="Filamento descargado." CLEAR=1
        RESTORE_GCODE_STATE NAME=UNLOAD_state
        #BEEP
    {% else %}
        NOTIFY TEXT="Temperatura baja, imposible descargar el filamento."
    {% endif %}

[gcode_macro _TEMP_EXTRUDER]
gcode:
    {% if not printer.extruder.can_extrude %} ; se comprueba que NO se pueda extruir
        {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
        {% set min_temp = printer.extruder.min_extrude_temp|default(170) %}
        {% set printing_temp = vg.temp_extruder_pause if printer.pause_resume.is_paused else vg.temp_extruder %}
        #BEEP
        NOTIFY TEXT="Temperatura baja, calentando y esperando temperatura optima."
        M104 S{min_temp}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={printing_temp}; espera hasta alcanzar la temperatura de extrusion
    {% endif %}

[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117
 
###################################################################################################################################################################
# Current Version v_202305221109
# Mas info - https://3dwork.gitbook.io/3dwork.io/klipper/mejoras/macros-mejoras/cambio-filamentos-m600

[gcode_macro MOVE_PARK]
description: Aparca el cabezal de impresion, se puede ajustar en _VAR_GLOBALS.
gcode:
    {% set vg = printer["gcode_macro _VAR_GLOBALS"] %}
   
    # Se realiza el calculo de la posicion Z, X e Y se definen en _VAR_GLOBALS.
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    
    {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
    {% else %}
      {% set z_safe = max_z - act_z %}
    {% endif %}

    NOTIFY TEXT="Aparcando cabezal de impresion"

    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{vg.retract_length} F2100
    {% else %}
        NOTIFY TEXT="Temperatura baja, imposible extruir"
    {% endif %}
    
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F6000
        G90
        G1 X{vg.x_park} Y{vg.y_park} F6000
    {% else %}
        NOTIFY TEXT="Ejes no inicializados.(HOME_ALL)"
    {% endif %}

[gcode_macro TORNILLOS]
gcode: 
  SCREWS_TILT_CALCULATE


[gcode_macro Disable_steppers]
gcode: 
  M84 ; Disable motors

[gcode_macro LOAD_FILAMENT]
gcode:
  M117  LOADING...
  G91
  G1 E70 F450
  G1 E25 F200
  G90

[gcode_macro UNLOAD_FILAMENT]
gcode:
  M117  UNLOADING...
  G91
  G1 E10.0 F450
  G1 E-25 F400
  G1 E-75 F600
  G90
  
[gcode_macro STOP_FAN_MEM]
description: Para el ventilador de capa y guarda la velocidad.
variable_speed_fan_extruder : 0
gcode:
  SET_GCODE_VARIABLE MACRO=STOP_FAN_MEM VARIABLE=speed_fan_extruder VALUE={printer['fan'].speed}
  M106 S0

[gcode_macro START_FAN_MEM]
description: Reanuda el ventilador de capa con la velocidad anterior de giro.
gcode:
  M106 S{(printer['gcode_macro STOP_FAN_MEM'].speed_fan_extruder*256)|int}


[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro OFFSET_Z]
gcode:PROBE_CALIBRATE

################################################################################
################################################################################

[gcode_macro TEST_SPEED]
#
# TEST_SPEED
# 
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
description: Perform a speed test SPEED=180 ACCEL=3000 ITERATIONS=5
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
        G0 Z30
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED


 

[gcode_macro PID_EXTRUDER]
gcode:
    {% set T = params.T|default(230)|int %}
  PID_CALIBRATE HEATER=extruder TARGET={T}
  SAVE_CONFIG

[gcode_macro PID_BED]
gcode:
    {% set T = params.T|default(60)|int %}
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  SAVE_CONFIG


[gcode_macro PID_ALL]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|int %}
    {% set  BED_TEMP = params.BED_TEMP|default(55)|int %}
  PID_CALIBRATE HEATER=extruder TARGET={EXTRUDER_TEMP}
  PID_CALIBRATE HEATER=heater_bed TARGET={BED_TEMP}
  SAVE_CONFIG

[gcode_macro SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}

[gcode_macro REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}

#  =====================================================================================================================================

# Pressure Advance test macro by drawing 20 simple lines
#
# Adapted from: https://www.reddit.com/r/VORONDesign/comments/sjdiol/pressure_advance_testing_macro_klipper/
# to suit home-made free ABL that requires a pause after homing to manually retract the probe.
#
# Este proceso es una unica macro:
#
# - PRESSURE_ADVANCE_TEST
#   primero alcanza las temperaturas objetivo de la cama y el extrusor, luego un homeall y hace un sondeo
#   automatico si hay un dispositivo para ello, seguidamente inicia la prueba de Avance de Presion, imprimiendo
#   20 lineas usando diferentes valores de avance de presion, segun los valores indicados en los parametros 
#   (PA_START=0.01 PA_STEP=0.01 NZL=0.4).
#
#   BED_TEMP      = temperatura objetivo de la cama.
#   EXTRUDER_TEMP = temperatura objetivo del extrusor.
#   PA_START      = presion de avance inicial.
#   PA_STEP       = incremento por linea de la presion de avance.
#   NZL           = diametro de la boquilla, por defecto la que se tenga configurada en klipper (0.4).
#
# ej. PRESSURE_ADVANCE_TEST BED_TEMP=65 EXTRUDER_TEMP=205 PA_START=0.01 PA_STEP=0.01 NZL=0.4
#
# Al terminar la prueba se realiza el calculo del presure advance:
# Pressure Advance = PA_START + (PA_STEP * n)  n = linea mas recta y sin imperfecciones (0-19). 
#
# ej. .01 + (.01 * 11) = .12
#
# SET_PRESSURE_ADVANCE ADVANCE=0.12
#

[gcode_macro PRESSURE_ADVANCE_TEST]
gcode:

  ; variables de configuracion
  {% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}    ; diametro de la boquilla configurada en klipper.
  {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}  ; centro de la cama en eje X
  {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}  ; centro de la cama en eje Y

  ; parametros
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  {% set PA_START = params.PA_START|default(0.0)|float %}
  {% set PA_STEP = params.PA_STEP|default(0.005)|float %}
  {% set NZL = params.NZL|default(NZL_CFG)|float %}
  
  ; constantes de movimiento
  {% set Y_HOME = printer.configfile.config["stepper_y"]["position_max"]|float - 5 %}   ; posiciona el cabezal en position_max -5
  {% set X_HOME = printer.configfile.config["stepper_x"]["position_max"]|float - 5 %}   ; posiciona el cabezal en position_max -5
  {% set Z = 100 %}        ; subir Z al terminar el test
  {% set XY_SPEED = 1500 %}   ; velocidad de desplazamiento del eje X e Y al finalizar   
  {% set Z_SPEED = 600 %}  ; velocidad de desplazamiento del eje Z

  ; variables
  {% set E20 = (0.1147475 * NZL) * 20|float %}
  {% set E40 = (0.1147475 * NZL) * 40|float %}


  # gcode
  M140 S{BED_TEMP}      ; Empezar a calentar la cama.
  M104 S{EXTRUDER_TEMP} ; Empezar a calentar la extrusora.
  M190 S{BED_TEMP}      ; Espere a que la cama alcance la temperatura objetivo antes de continuar.
  M109 S{EXTRUDER_TEMP} ; Espere a que el extrusor alcance la temperatura objetivo antes de continuar.
  G28                   ; Inicio todos los ejes.
  {% if printer.configfile.config["bltouch"] is defined or 
        printer.configfile.config["probe"] is defined  %}
    BED_MESH_CALIBRATE  ; G29 sondeo de la cama.
  {% endif %}

  G21     ; unidades milimetricas
  G90     ; absoluto XYZ
  M83     ; relative E
  G92 E0  ; restablecer la extrusora 
  M106 S0 ; poner la velocidad del ventilador a cero

  SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
  #
  # Doble linea de purgado en el lado izquierdo de la cama.
  #
  G1 X10.1 Y20 Z0.28 F3000.0        ;  mover a la posicion inicial
  G1 X10.1 Y200.0 Z0.28 F1500.0 E15 ;  dibujar la primera linea
  G1 X10.4 Y200.0 Z0.28 F3000.0     ;  muevete un poco hacia un lado
  G1 X10.4 Y20 Z0.28 F1500.0 E30    ;  dibujar la segunda linea
  G1 E-2 F1800                      ;  retraer
  G1 Z5 F300                        ;  moverse por encima de la altura de la capa

  # bucle para imprimir las 20 lineas.
  {% for i in range(0, 20) %}
    SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)}           ;  establecer avance de presion en cada linea
    M117 Avance de presion de prueba:  {PA_START + (i * PA_STEP)}
    G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F5000                        ;  mover a la posiciun inicial
    G1 Z0.2 F300                                                      ;  mover a la altura de la capa
    G1 E2 F1800                                                       ;  extruir
    G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300                  ;  linea de impresion 1 parte
    G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000                 ;  linea de impresion 2 parte
    G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300                  ;  linea de impresion 3 parte
    G1 E-2 F1800                                                      ;  retraer
    G1 Z5 F300                                                        ;  moverse por encima de la altura de la capa, a 5mm
  {% endfor %}

  TURN_OFF_HEATERS ; desactiva extrusor y cama

  # Se prepara la cama para mostrar el resultado del test

  ;  Levanta el cabezal de impresion 100mm
  G1 Z{Z} F{Z_SPEED} ;  Sube Z

  ; desplaza la cama hacia adelante solo si la cinematica lo permite.
  {% if printer.configfile.config["printer"]["kinematics"]|lower in ['cartesian' , 'deltesian' , 'corexz'] %}
    G1 X{X_HOME} Y{Y_HOME} F{XY_SPEED} ;  Presenta la impresion desplazando la cama hacia adelante y aparcando el cabezal.
  {% endif %}

  M117 Encuentre la mejor linea y multipliquela por ({PA_START} + (linea seleccionada(0-19) * {PA_STEP})) para encontrar su configuracion de Pressure Advance idonea.	

#==============================================================================================

[gcode_macro ECHO_START_PRINT]
description: Echo START_PRINT variables to the console.
gcode:
  {% for var, value in printer["gcode_macro START_PRINT"].items() %}
      {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}

